#!/usr/bin/env bash
# Script: bashbot
# Description: A simple modular IRC bot written in Bash
# Author: baccenfutter, c-base.org
# Inspired by: Sean B. Palmer, inamidst.com
#
# - The basic idea is while loop that uses telnet as communication interface
#   with the IRC network. Communication input is piped into telnet using an
#   input file. Output is piped into the while loop and parsed by a read
#   command.
#   The allmighty super-cow powers of the source command allow a clean
#   file and directory structure, which allows modular programming, keeping the
#   performance requirements as low as possible for every read input line.
#   Additionally, using the source command to run sub-scripts within the parent
#   script allows use of one big namespace for all variables.
#
# - Initiates main loop
# - Provides four fundamental functions:
#   1. answer()
#      Assembles a PRIVMSG and sends it to the network
#   2. acl_auth()
#      Provides a basic authentication routine
#   3. acl_check()
#      Takes required ACL and compares with the ACL of the user initiating the
#      command.
#   4. mode_check()
#      Verifies if bot has $mode in $chan.
# - Calls the main input line crawler -> bin/main

# source config
. etc/*

answer()
{
	msg=$@
	line=''
	
	# first, fetch errors
	if [[ "$msg" == "" ]]; then
		echo "error: can't send privmsg - missing parameter!"
		return 0
	fi
	# start assembling the response line
	line="PRIVMSG"
	
	# check for query or channel
	if [[ "${chan:0:1}" == "#" ]]; then
		line="$(echo $line $chan :)"
		# check for $config_reply_nick
		if [[ $config_reply_nick == true ]]; then line="$(echo $line $source_nick:)"; fi
	else
		line=$(echo $line $source_nick :)
	fi

	# finally, add $msg and burst it out
	line="$(echo $line$msg)"
	echo "$line" >> $inputfile
}

acl_auth()
{
	acl=$(egrep "^$username:$password" < var/users | cut -d: -f3)
	[[ -n $acl ]] && echo "$hostmask:$username:$acl" >> $aclfile && return 0
	return 1
}

acl_check()
{
	case $1 in
		owner)required_acl=1;;
		admin)required_acl=2;;
		user)required_acl=3;;
	esac

	acl="$(cat $aclfile | grep $hostmask | cut -d: -f3)"
	case $acl in
		owner)acl=1;;
		admin)acl=2;;
		user)acl=3;;
		*)acl=9999;;
	esac

	if [[ $acl -le $required_acl ]] ; then
		return 0
	else
		return 1
	fi
}

mode_check()
{
	required_mode=$1
	chan=$2
	case $required_mode in
		voice)
			for my_voice_chan in $(echo $my_voice_chans)
			do
				[[ $my_voice_chan == $chan ]] && return 0
			done
			;;
		op)
			for my_op_chan in $(echo $my_op_chans)
			do
				[[ $my_op_chan == $chan ]] && return 0
			done
			;;
	esac
	return 1
}

### the bot's main body ###

. bin/connect

tail -f $inputfile | telnet $server $port | \
while true
	do read line || break

	echo $(date +%H:%M:%S) $line
	
	if [[ "${line:0:1}" == ":" ]]; then
		. bin/main
	else
		if [[ "${line:0:4}" == "PING" ]]; then
			. bin/global_ping
		fi
	fi
done

